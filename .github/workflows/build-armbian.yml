name: "Build Armbian Images"
on:
  workflow_call:
    inputs:
      git_ref:
        required: true
        type: string
      board_id:
        required: true
        type: string
      board_name:
        required: true
        type: string
      require_test:
        required: false
        default: true
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      VERSION: "${{ inputs.git_ref }}"
    defaults:
      run:
        shell: bash
    outputs:
      artifact_file: ${{ steps.build-armbian.outputs.artifact_file }}
      artifact_name: ${{ github.run_id }}-${{ inputs.board_id }}-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: "${{ env.VERSION }}"
      - name: "Build Armbian"
        id: build-armbian
        run: |
          set -x
          export LIB_TAG=master
          IMG="NextCloudPi_${{ inputs.board_name }}_$( date  "+%m-%d-%y" ).img"
          [[ "${{ github.ref_protected }}" == true ]] || export DBG=x
 
          ./build/build-SD-armbian.sh "${{ inputs.board_id }}" "${{ inputs.board_name }}"
              
          artifacts=("armbian/output/images/Armbian"*.img)
          mv "${artifacts[0]}" "output/$IMG"
          echo "::set-output name=artifact_file::${IMG}"
      - name: upload Armbian image to artifact store
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.run_id }}-${{ inputs.board_id }}-image
          path: output/${{ steps.build-armbian.outputs.artifact_file }}
          if-no-files-found: error

  test:
    needs: build
    runs-on: ubuntu-latest
    env:
      VERSION: "${{ inputs.git_ref }}"
    defaults:
      run:
        shell: bash
    continue-on-error: ${{ !inputs.require_test }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: "${{ env.VERSION }}"
      - uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.artifact_name }}
          path: output
      - name: Prepare test
        run: |
          set -ex
          ls -l output
          [[ -f "output/${{ needs.build.outputs.artifact_file }}.broken" ]] && {
            mv "output/${{ needs.build.outputs.artifact_file }}.broken" "output/${{ needs.build.outputs.artifact_file }}"
          }
          cp output/${{ needs.build.outputs.artifact_file }} ncp.img
          sudo apt-get install -y systemd-container
          sudo pip install selenium
          sudo rm -rf raspbian_root
          . ./build/buildlib.sh
          mount_raspbian "ncp.img"
          sudo wget -nv https://github.com/multiarch/qemu-user-static/releases/latest/download/qemu-aarch64-static -O raspbian_root/usr/bin/qemu-aarch64-static
          sudo wget -nv https://github.com/multiarch/qemu-user-static/releases/latest/download/qemu-arm-static -O raspbian_root/usr/bin/qemu-arm-static
          echo 'Mutex posixsem' | sudo tee -a raspbian_root/etc/apache2/mods-available/ssl.conf
      - name: Test image
        continue-on-error: ${{ !inputs.require_test }}
        id: test
        run: |
          set -ex
          
          sudo systemd-nspawn --boot -D ./raspbian_root/ -M ncp --hostname=nextcloudpi &> container.log &
          sleep 30
          success=false
          for attempt in {1..30}
          do
            echo ":: Wait for container to startup (attempt $attempt/30) ::"
            ip="$(sudo systemd-run --machine=ncp -P --wait bash -c '. /usr/local/etc/library.sh > /dev/null; get_ip')"
            [[ -n "$ip" ]] && curl -k "https://$ip/activate" > /dev/null || { sleep 6; continue; }
            success=true
            break
          done
          
          [[ "$success" == "true" ]] || {
            echo "Could not reach container. Aborting..."
            echo "Container logs:"
            cat container.log
            exit 1
          }
          
          success=false
          for attempt in {1..3}
          do
            echo ":: Activation Tests (attempt $attempt/3) ::"
            python tests/activation_tests.py -t 300 --no-gui "$ip" 443 4443 || {
              echo "Activation test failed!"
              echo "Geckodriver logs:"
              tail -n 20 geckodriver.log >&2 || true
              echo "================"
              echo "ncp.log: "
              sudo systemd-run --wait -P --machine=ncp ncp /bin/bash -c "tail -n20 /var/log/ncp.log" || true
              sleep 6
              continue
            }
            success=true
            break
          done
          [[ "$success" == "true" ]] || exit 1
          
          success=false
          for attempt in {1..3}
          do
            echo ":: System Tests (attempt $attempt/3) ::"
            sudo python tests/system_tests.py --non-interactive || {
              echo "System test failed!"
              sleep 6
              continue
            }
            success=true
            break
          done
          [[ "$success" == "true" ]] || exit 1
          
          success=false
          for attempt in {1..3}
          do
            echo ":: Nextcloud Tests (attempt $attempt/3) ::"
            python tests/nextcloud_tests.py --no-gui "$ip" 443 4443 || {
              echo "Nextcloud test failed!"
              echo "Geckodriver logs:"
              tail -n 20 geckodriver.log >&2 || true
              echo "================"
              echo "ncp.log: "
              sudo systemd-run --wait -P --machine=ncp ncp /bin/bash -c "tail -n20 /var/log/ncp.log" || true
              sleep 6
              continue
            }
            success=true
            break
          done
          
          result=$?
          sudo machinectl terminate ncp || true
          exit "$result"
      - name: Rename artifact
        if: ${{ steps.test.conclusion == 'failure' }}
        run: mv output/${{ needs.build.outputs.artifact_file }} "output/${{ needs.build.outputs.artifact_file }}.broken"
      - name: Replace artifact
        if: ${{ steps.test.conclusion == 'failure' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.build.outputs.artifact_name }}
          path: output/${{ needs.build.outputs.artifact_file }}.broken
          if-no-files-found: error
      - name: Fail
        if: ${{ steps.test.conclusion == 'failure' }}
        run: exit 1

