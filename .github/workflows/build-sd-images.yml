name: "Build SD images"
on:
  workflow_call:
    inputs:
      git_ref:
        required: true
        type: string

jobs:
  build-rpi:
    runs-on: ubuntu-latest
    env:
      UID: "${{ github.run_id }}-rpi"
      VERSION: "${{ inputs.git_ref }}"
    defaults:
      run:
        shell: bash
    outputs:
      artifact_name: ${{ steps.pack-rpi.outputs.artifact_name }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: "${{ env.VERSION }}"
      - name: Build RPI SD Image
        id: build-rpi
        run: |
          set -e
          IMG="NextCloudPi_RPi_$( date  "+%m-%d-%y" ).img"
          wget -q https://github.com/multiarch/qemu-user-static/releases/latest/download/qemu-aarch64-static -O ./qemu-aarch64-static
          ./build/build-SD-rpi.sh

          for i in {1..10}
          do
            sudo losetup | grep "${IMG}" || break;
            [[ "$i" -lt 10 ]] || { echo "Timeout while waiting for image to unount"; exit 1; }
            sleep 6
            echo "Retrying ($i out of 10)"
          done

          echo "::set-output name=image::${IMG}"
      - name: Pack RPI Image
        id: pack-rpi
        run: |
          IMG="${{ steps.build-rpi.outputs.image }}"
          TAR="$( basename "$IMG" .img ).tar.gz"
          . ./build/buildlib.sh
          pack_image "tmp/$IMG" "output/$TAR"
          echo "::set-output name=artifact_name::${TAR}"

      - name: upload RPI image to artifact store
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.run_id }}-rpi-image
          path: output/${{ steps.pack-rpi.outputs.artifact_name }}
          if-no-files-found: error

  test-rpi:
    #needs: build-rpi
    runs-on: ubuntu-latest
    env:
      UID: "${{ github.run_id }}-rpi"
      VERSION: "${{ inputs.git_ref }}"
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: "${{ env.VERSION }}"
      - uses: actions/download-artifact@v3
        if: false
        with:
          name: ${{ github.run_id }}-rpi-image
          path: output/${{ needs.build-rpi.outputs.artifact_name }}
      - name: Extract image
        if: false
        run: |
          set -ex
          tar xf "output/${{ needs.build-rpi.outputs.artifact_name }}"
          mv "$( basename "${{ needs.build-rpi.outputs.artifact_name }}" .tar.gz ).img" ncp.img
      - name: Download image
        run: |
          mkdir -p output
          wget -O ncp.tar.gz https://github.com/nextcloud/nextcloudpi/releases/download/v1.48.3/NextCloudPi_RPi_07-25-22.tar.gz
          tar xf "output/ncp.tar.gz"
          mv output/ncp.img ncp.img
      - name: Prepare test
        run: |
          set -ex
          sudo apt-get install -y systemd-container
          sudo pip install selenium
          sudo rm -rf raspbian_root
          sudo mkdir -p raspbian_root
          . ./build/buildlib.sh
          mount_raspbian "ncp.img"
          sudo cp qemu-aarch64-static raspbian_root/usr/bin/
          echo 'Mutex posixsem' | sudo tee -a raspbian_root/etc/apache2/mods-available/ssl.conf
      - name: Test image
        run: |
          set -ex
          
          sudo systemd-nspawn --boot -D ./raspbian_root/ -M ncp --hostname=nextcloudpi &> container.log &
          sleep 30
          success=false
          for attempt in {1..30}
          do
            echo ":: Wait for container to startup (attempt $attempt/30) ::"
            ip="$(cat container.log | grep 'My IP address is' | cut -d ' ' -f5)"
            curl -k "https://$ip/activate" > /dev/null || { sleep 6; continue; }
            success=true
            break
          done
          
          [[ "$success" == "true" ]] || {
            echo "Could not reach container. Aborting..."
            echo "Container logs:"
            cat container.log
            exit 1
          }
          
          success=false
          for attempt in {1..3}
          do
            echo ":: Activation Tests (attempt $attempt/3) ::"
            python tests/activation_tests.py --no-gui "$ip" 443 4443 || {
              echo "Activation test failed!"
              echo "Geckodriver logs:"
              tail -n 20 geckodriver.log >&2 || true
              echo "================"
              echo "ncp.log: "
              sudo systemd-run --wait --machine=ncp ncp /bin/bash -c "tail -n20 /var/log/ncp.log"
              sleep 6
              continue
            }
            success=true
            break
          done
          [[ "$success" == "true" ]] || exit 1
          
          success=false
          for attempt in {1..3}
          do
            echo ":: System Tests (attempt $attempt/3) ::"
            sudo python tests/system_tests.py --non-interactive || {
              echo "System test failed!"
              sleep 6
              continue
            }
            success=true
            break
          done
          [[ "$success" == "true" ]] || exit 1
          
          success=false
          for attempt in {1..3}
          do
            echo ":: Nextcloud Tests (attempt $attempt/3) ::"
            python tests/nextcloud_tests.py --no-gui "$ip" 443 4443 || {
              echo "Nextcloud test failed!"
              echo "Geckodriver logs:"
              tail -n 20 geckodriver.log >&2 || true
              echo "================"
              echo "ncp.log: "
              sudo systemd-run --wait --machine=ncp ncp /bin/bash -c "tail -n20 /var/log/ncp.log"
              sleep 6
              continue
            }
            success=true
            break
          done
          
          result=$?
          sudo machinectl terminate ncp || true
          exit "$result"

  build-armbian:
    runs-on: ubuntu-latest
    env:
      VERSION: "${{ inputs.git_ref }}"
    defaults:
      run:
        shell: bash
    outputs:
      artifact_name: ${{ steps.pack-armbian.outputs.artifact_name }}
    strategy:
      matrix:
        board:
          - odroidxu4 OdroidHC2
          - rockpro64 RockPro64
          - rock64 Rock64
          - bananapi Bananapi
          - odroidhc4 OdroidHC4
          - odroidc4 OdroidC4
          - odroidc2 OdroidC2
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: "${{ env.VERSION }}"
      - name: "Build Armbian"
        id: build-armbian
        run: |
          set -x
          export LIB_TAG=master
          board_params=(${{ matrix.board}})
          IMG="NextCloudPi_${board_params[1]}_$( date  "+%m-%d-%y" ).img"
          ./build/build-SD-armbian.sh "${board_params[@]}"
          echo "::set-output name=image::${IMG}"
      - name: "Pack image"
        id: pack-armbian
        run: |
          IMG="${{ steps.build-armbian.outputs.image }}"
          TAR="$( basename "$IMG" .img ).tar.gz"
          
          artifacts=("armbian/output/images/Armbian"*.img)
          mv "${artifacts[0]}" "tmp/$IMG"
          . ./build/buildlib.sh
          pack_image "tmp/$IMG" "output/$TAR"
          echo "::set-output name=artifact_name::${TAR}"
      - name: Prepare test
        run: |
          set -ex
          sudo apt-get install -y systemd-container
          sudo pip install selenium
          sudo rm -rf raspbian_root
          sudo mkdir -p raspbian_root
          . ./build/buildlib.sh
          [[ -d "raspbian_root" ]] && rm -r raspbian_root
          mount_raspbian "tmp/${{ steps.build-armbian.outputs.image }}"
          sudo cp qemu-aarch64-static raspbian_root/usr/bin/
          echo 'Mutex posixsem' | sudo tee -a raspbian_root/etc/apache2/mods-available/ssl.conf
      - name: Test image
        run: |
          set -ex
          
          sudo systemd-nspawn --boot -D ./raspbian_root/ -M ncp --hostname=nextcloudpi &> container.log &
          sleep 30
          success=false
          for attempt in {1..30}
          do
            echo ":: Wait for container to startup (attempt $attempt/30) ::"
            ip="$(cat container.log | grep 'My IP address is' | cut -d ' ' -f5)"
            curl -k "https://$ip/activate" > /dev/null || { sleep 6; continue; }
            success=true
            break
          done
          
          [[ "$success" == "true" ]] || {
            echo "Could not reach container. Aborting..."
            echo "Container logs:"
            cat container.log
            exit 1
          }
          
          success=false
          for attempt in {1..3}
          do
            echo ":: Activation Tests (attempt $attempt/3) ::"
            python tests/activation_tests.py --no-gui "$ip" 443 4443 || {
              echo "Activation test failed!"
              echo "Geckodriver logs:"
              tail -n 20 geckodriver.log >&2 || true
              echo "================"
              echo "ncp.log: "
              sudo systemd-run --wait --machine=ncp ncp /bin/bash -c "tail -n20 /var/log/ncp.log"
              sleep 6
              continue
            }
            success=true
            break
          done
          [[ "$success" == "true" ]] || exit 1
          
          success=false
          for attempt in {1..3}
          do
            echo ":: System Tests (attempt $attempt/3) ::"
            sudo python tests/system_tests.py --non-interactive || {
              echo "System test failed!"
              sleep 6
              continue
            }
            success=true
            break
          done
          [[ "$success" == "true" ]] || exit 1
          
          success=false
          for attempt in {1..3}
          do
            echo ":: Nextcloud Tests (attempt $attempt/3) ::"
            python tests/nextcloud_tests.py --no-gui "$ip" 443 4443 || {
              echo "Nextcloud test failed!"
              echo "Geckodriver logs:"
              tail -n 20 geckodriver.log >&2 || true
              echo "================"
              echo "ncp.log: "
              sudo systemd-run --wait --machine=ncp ncp /bin/bash -c "tail -n20 /var/log/ncp.log"
              sleep 6
              continue
            }
            success=true
            break
          done
          
          result=$?
          sudo machinectl terminate ncp || true
          exit "$result"
      - name: upload Armbian image to artifact store
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.run_id }}-armbian-image
          path: output/${{ steps.build-pack-armbian.outputs.artifact_name }}
          if-no-files-found: error
