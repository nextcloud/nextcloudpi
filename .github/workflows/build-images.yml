name: 'Build and test SD/VM images'
on:
  push:
    branches:
      - "feature/cicd/lxd-builds"

jobs:
  build-lxd:
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.pack-lxd.outputs.artifact_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: whywaita/setup-lxd@v1
        with:
          lxd_version: latest/stable
      - name: Build LXD image
        id: build-lxd
        run: |
          ./build/build-LXD.sh
      - name: Pack LXD image
        id: pack-lxd
        run: |
          . ./build/buildlib.sh
          ARTIFACT_NAME="NextCloudPi_LXD_$( date  "+%m-%d-%y" )"
          lxc image export -q ncp/"${version}" "output/${ARTIFACT_NAME}"
          echo "::set-output name=artifact_name::${ARTIFACT_NAME}.tar.gz"
      - name: upload LXD image to artifact store
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.run_id }}-lxd-image
          path: output/${{ steps.pack-lxd.outputs.artifact_name }}
          if-no-files-found: error

  test-lxd:
    needs:
      - build-lxd
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: whywaita/setup-lxd@v1
        with:
          lxd_version: latest/stable
      - name: Setup Firefox
        uses: browser-actions/setup-firefox@latest
      - name: Setup GeckoDriver
        uses: browser-actions/setup-geckodriver@latest
      - name: Setup Selenium
        run: pip install selenium
      - name: download LXD image from artifact store
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.run_id }}-lxd-image
      - name: Launch ncp container
        run: |
          set -x
          lxc delete -q -f ncp || true
          lxc image import -q "./${{ needs.build-lxd.outputs.artifact_name }}" --alias "ncp/test"
          systemd-run --user --scope -p "Delegate=yes" lxc launch -q "ncp/test" ncp
          lxc exec ncp -- bash -c 'while [ "$(systemctl is-system-running 2>/dev/null)" != "running" ] && [ "$(systemctl is-system-running 2>/dev/null)" != "degraded" ]; do :; done'
          sleep 30
      - name: Test LXD Image
        working-directory: ./tests
        run: |
          ip="$(lxc list -c n4 -f csv | grep '^ncp' | cut -d ',' -f2)"
          ip="${ip/% *}"
          python activation_tests.py --no-gui "$ip" 443 4443 || {
            tail -n 20 geckodriver.log >&2 || true
            echo "Activation test failed!"
            exit 1
          }
          python system_tests.py --non-interactive || {
            echo "System test failed!"
            exit 1
          }
          python nextcloud_tests.py --no-gui "$ip" 443 4443 || {
            echo "Nextcloud test failed!"
            exit 1
          }
          lxc stop ncp

  build-rpi:
    runs-on: ubuntu-latest
    env:
      HCLOUD_TOKEN: "${{ secrets.TEST_AUTOMATION_HCLOUD_API_TOKEN }}"
      UID: "${{ github.run_id }}-rpi"
      VERSION: "${{ github.event.inputs.version || github.head_ref || github.ref_name }}"
    defaults:
      run:
        shell: bash
    outputs:
      artifact_name: ${{ steps.pack-rpi.outputs.artifact_name }}
    steps:
      - uses: 3bit/setup-hcloud@v1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build RPI SD Image
        run: |
          set -e
          wget -q https://github.com/multiarch/qemu-user-static/releases/latest/download/qemu-aarch64-static -O ./qemu-aarch64-static
          ./build/build-SD-rpi.sh
      - name: Pack RPI Image
        id: pack-rpi
        run: |
          IMG="NextCloudPi_RPi_$( date  "+%m-%d-%y" ).img"
          TAR="$( basename "$IMG" .img ).tar.gz"
          . ./build/buildlib.sh
          pack_image "tmp/$IMG" "output/$TAR"
          echo "::set-output name=artifact_name::${TAR}"
      - name: upload RPI image to artifact store
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.run_id }}-rpi-image
          path: output/${{ steps.pack-rpi.outputs.artifact_name }}
          if-no-files-found: error
  
  build-armbian:
    runs-on: ubuntu-latest
    env:
      VERSION: "${{ github.event.inputs.version || github.head_ref || github.ref_name }}"
    defaults:
      run:
        shell: bash
    outputs:
      artifact_name: ${{ steps.pack-armbian.outputs.artifact_name }}
    strategy:
      matrix:
        board:
          - odroidxu4 OdroidHC2
          - rockpro64 RockPro64
          - rock64 Rock64
          - bananapi Bananapi
          - odroidhc4 OdroidHC4
          - odroidc4 OdroidC4
          - odroidc2 OdroidC2
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: "Build Armbian"
        run: |
          set -x
          export LIB_TAG=master
          board_params=(${{ matrix.board}})
          ./build/build-SD-armbian.sh "${board_params[@]}"
      - name: "Pack image"
        id: pack-armbian
        run: |
          board_params=(${{ matrix.board}})
          IMG="NextCloudPi_${board_params[1]}_$( date  "+%m-%d-%y" ).img"
          TAR="$( basename "$IMG" .img ).tar.gz"
          
          artifacts=("armbian/output/images/Armbian"*.img)
          mv "${artifacts[0]}" "tmp/$IMG"
          . ./build/buildlib.sh
          pack_image "tmp/$IMG" "output/$TAR"
          echo "::set-output name=artifact_name::${TAR}"
      - name: upload Armbian image to artifact store
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.run_id }}-armbian-image
          path: output/${{ steps.build-pack-armbian.outputs.artifact_name }}
          if-no-files-found: error

  release:
    needs:
      - build-lxd
      - test-lxd
      - build-rpi
      - build-armbian
    #if: ${{ github.event_name == 'push' && github.ref_type == 'tag' }}
    runs-on: ubuntu-latest
    env:
      UID: "${{ github.run_id }}-rpi"
      VERSION: "${{ github.event.inputs.version || github.head_ref || github.ref_name }}"
    defaults:
      run:
        shell: bash
    steps:
      - name: download images from artifact store
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Create Release
        run: |
          msg=()
          assets=()
          for asset in artifacts/*/*.tar.gz;
          do
            msg="$msg
          \`\`\`
          $(md5sum "$asset")
          \`\`\`"
            assets+=(-a "$asset")
          done
          
          echo "Assets: ${assets[*]}"
          echo "Message: ${msg[*]}"
          
          echo hub release create "${assets[@]}" -F - "${{ env.VERSION }}" <<EOF
          $(git tag -n10 "${{ env.VERSION }}" || echo "No tag message found")
          
          [Changelog](https://github.com/nextcloud/nextcloudpi/blob/${{ env.VERSION }}/changelog.md)
          
          **Checksums:**
          ${msg[*]}
          EOF


