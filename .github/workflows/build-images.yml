name: 'Build and test SD/VM images'
on:
  push:
    branches:
      - "feature/cicd/lxd-builds"

jobs:
  build-lxd:
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.build-lxd.outputs.artifact_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: whywaita/setup-lxd@v1
        with:
          lxd_version: latest/stable
      - name: Build LXD Image
        id: build-lxd
        run: |
          ./build/build-LXD.sh
          . ./build/buildlib.sh
          ARTIFACT_NAME="NextCloudPi_LXD_$( date  "+%m-%d-%y" )"
          lxc image export -q ncp/"${version}" "output/${ARTIFACT_NAME}"
          echo "::set-output name=artifact_name::${ARTIFACT_NAME}.tar.gz"
      - name: upload LXD image to artifact store
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.run_id }}-lxd-image
          path: output/${{ steps.build-lxd.outputs.artifact_name }}
          if-no-files-found: error
  test-lxd:
    needs: 
      - build-lxd
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: whywaita/setup-lxd@v1
        with:
          lxd_version: latest/stable
      - name: Setup Firefox
        uses: browser-actions/setup-firefox@latest
      - name: Setup GeckoDriver
        uses: browser-actions/setup-geckodriver@latest
      - name: Setup Selenium
        run: pip install selenium
      - name: download LXD image from artifact store
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.run_id }}-lxd-image
      - name: Test LXD Image
        working-directory: ./tests
        run: |
          set -x
          pwd
          ls -l /home/runner/work/nextcloudpi/nextcloudpi/
          lxc delete -q -f ncp || true
          lxc image import -q "../${{ needs.build-lxd.outputs.artifact_name }}" --alias "ncp/test"
          lxc image list
          systemd-run --user --scope -p "Delegate=yes" lxc launch -q "ncp/test" ncp
          lxc exec ncp -- bash -c 'while [ "$(systemctl is-system-running 2>/dev/null)" != "running" ] && [ "$(systemctl is-system-running 2>/dev/null)" != "degraded" ]; do :; done'
          sleep 30
          ip="$(lxc list -c n4 -f csv | grep '^ncp' | cut -d ',' -f2)"
          ip="${ip/% *}"
          python activation_tests.py --no-gui "$ip" 443 4443 || {
            tail -n 20 geckodriver.log >&2 || true
            echo "Activation test failed!"
            exit 1
          }
          python system_tests.py --non-interactive || {
            echo "System test failed!"
            exit 1
          }
          python nextcloud_tests.py --no-gui "$ip" 443 4443 || {
            echo "Nextcloud test failed!"
            exit 1
          }
          lxc stop ncp

  build-rpi:
    runs-on: ubuntu-latest
    env:
      HCLOUD_TOKEN: "${{ secrets.TEST_AUTOMATION_HCLOUD_API_TOKEN }}"
      UID: "${{ github.run_id }}-rpi"
      VERSION: "${{ github.event.inputs.version || github.head_ref || github.ref_name }}"
    defaults:
      run:
        shell: bash
    outputs:
      artifact_name: ${{ steps.build-lxd.outputs.artifact_name }}
    steps:
      - uses: 3bit/setup-hcloud@v1
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build RPI SD Image
        id: build-rpi
        run: |
          set -e
          echo "Setup ssh"
          mkdir -p "$HOME/.ssh"
          ssh-keygen -t ed25519 -f "$HOME/.ssh/automation_ssh_key" -N ""
          chmod 0600 "$HOME/.ssh/automation_ssh_key"
          eval "$(ssh-agent)"
          ssh-add "$HOME/.ssh/automation_ssh_key"
          hcloud ssh-key create --name "rpi-build-${{ env.UID}}" --public-key-from-file "$HOME/.ssh/automation_ssh_key.pub"
          hcloud server create --image debian-11 --name "ncp-builder-${{ env.UID }}" --type cx11 --ssh-key "rpi-build-${{ env.UID }}"
          SSH_OPTIONS=(-o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i "$HOME/.ssh/automation_ssh_key")
          ssh_cmd=(ssh "root@$(hcloud server ip "ncp-builder-${{ env.UID }}")" "${SSH_OPTIONS[@]}")
          for i in {1..5}
          do
            "${ssh_cmd[@]}" bash -c "echo Server is online" && break;
            [[ $i -eq 5 ]] && {
              echo 'Failed to connect to hcloud server (timeout reached)!'
              exit 1
            }
            sleep 5
          done
          IMG="NextCloudPi_RPi_$( date  "+%m-%d-%y" ).img"
          TAR="$( basename "$IMG" .img ).tar.bz2"
          "${ssh_cmd[@]}" bash <<EOF
          apt-get update && apt-get install -y git zip unzip parted binfmt-support qemu-user-static pbzip2
          git clone https://github.com/nextcloud/nextcloudpi.git
          cd nextcloudpi
          git checkout "${{ env.VERSION }}"
          ./build/build-SD-rpi.sh
          . ./build/buildlib.sh
          pack_image "tmp/$IMG" "output/$TAR"
          EOF
          scp -r "${SSH_OPTIONS[@]}" "root@$(hcloud server ip "ncp-builder-${{ env.UID }}"):nextcloudpi/output" ./
          echo "::set-output name=artifact_name::${TAR}"
      - name: upload RPI image to artifact store
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.run_id }}-rpi-image
          path: output/${{ steps.build-rpi.outputs.artifact_name }}
          if-no-files-found: error
  
  cleanup-rpi:
    if: ${{ always() }}
    needs:
      - build-rpi
    runs-on: ubuntu-latest
    env:
      HCLOUD_TOKEN: "${{ secrets.TEST_AUTOMATION_HCLOUD_API_TOKEN }}"
      UID: "${{ github.run_id }}-rpi"
    steps:
      - uses: 3bit/setup-hcloud@v1
      - name: "Cleanup rpi server"
        run: |
          hcloud ssh-key delete "rpi-build-${{ env.UID}}" || echo "Error deleting ssh key!"
          hcloud server delete "ncp-builder-${{ env.UID }}"
  
  build-armbian:
    runs-on: ubuntu-latest
    env:
      VERSION: "${{ github.event.inputs.version || github.head_ref || github.ref_name }}"
    defaults:
      run:
        shell: bash
    strategy: 
      matrix:
        board:
          - odroidxu4 OdroidHC2
          - rockpro64 RockPro64
          - rock64 Rock64
          - bananapi Bananapi
          - odroidhc4 OdroidHC4
          - odroidc4 OdroidC4
          - odroidc2 OdroidC2
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: "Build Armbian"
        run: |
          export LIB_TAG=master
          ./build/build-SD-armbian.sh "${{ matrix.board }}"

  release:
    needs:
      - build-lxd
      - test-lxd
      - build-rpi
    #if: ${{ github.event_name == 'push' && github.ref_type == 'tag' }}
    runs-on: ubuntu-latest
    env:
      UID: "${{ github.run_id }}-rpi"
      VERSION: "${{ github.event.inputs.version || github.head_ref || github.ref_name }}"
    defaults:
      run:
        shell: bash
    steps:
      - name: download LXD image from artifact store
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.run_id }}-lxd-image
          path: output-lxd
      - name: download LXD image from artifact store
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.run_id }}-rpi-image
          path: output-rpi
      - name: Create Release
        run: |
          for asset in output-*/*;
          do
            md5sum "$asset"
          done


