name: 'Release'
on:
  workflow_dispatch:
    inputs:
      git_ref:
        description: git ref, branch or tag to test against
        required: false
        type: string
      sd-images:
        type: boolean
        description: 'Build/test SD images?'
        required: false
        default: true
      lxd:
        type: boolean
        description: 'Build/test LXD image?'
        required: false
        default: true
      docker:
        type: boolean
        description: 'Build/test docker images?'
        required: false
        default: true
      installer:
        type: boolean
        description: 'Run curl-installer/upgrade tests?'
        required: false
        default: true
  push:
    tags: ["v*"]

permissions:
  contents: write

jobs:
  build-and-test-lxd:
    if: "${{ github.event_name != 'workflow_dispatch' || inputs.lxd }}"
    uses: ./.github/workflows/build-lxd.yml
    with:
      git_ref: "${{ inputs.git_ref || github.head_ref || github.ref_name }}"
    secrets: inherit

  build-sd-images:
    if: "${{ github.event_name != 'workflow_dispatch' || inputs.sd-images }}"
    uses: ./.github/workflows/build-sd-images.yml
    with:
      git_ref: "${{ inputs.git_ref || github.head_ref || github.ref_name }}"
    secrets: inherit

  build-and-test-docker:
    if: "${{ github.event_name != 'workflow_dispatch' || inputs.docker }}"
    uses: ./.github/workflows/build-docker.yml
    with:
      git_ref: "${{ inputs.git_ref || github.head_ref || github.ref_name }}"
    secrets: inherit

  test-curl-installer:
    if: "${{ github.event_name != 'workflow_dispatch' || inputs.installer }}"
    uses: ./.github/workflows/vm-tests.yml
    with:
      git_ref: "${{ inputs.git_ref || github.head_ref || github.ref_name }}"
    secrets: inherit

  docker-release:
    needs:
      - build-and-test-docker
      - test-curl-installer
    if: ${{ github.event_name == 'push' && github.ref_type == 'tag' && github.ref_protected }}
    runs-on: ubuntu-latest
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create manifest and push as tag to docker hub
        run: |
          . ./build/buildlib.sh
          
          for arch in x86 armhf arm64
          do
            docker pull "thecalcaholic/ncp-internal-${arch}:${{ github.run_id }}"
            docker tag "thecalcaholic/ncp-internal-${arch}:${{ github.run_id }}" "ownyourbits/nextcloudpi-${arch}:${version?}"
            docker tag "ownyourbits/nextcloudpi-${arch}:${version?}" "ownyourbits/nextcloudpi-${arch}:latest"
            docker push "ownyourbits/nextcloudpi-${arch}:${version?}"
            docker push "ownyourbits/nextcloudpi-${arch}:latest"
          done

          docker manifest create ownyourbits/nextcloudpi:${version?} \
            ownyourbits/nextcloudpi-armhf:${version?} \
            ownyourbits/nextcloudpi-x86:${version?} \
            ownyourbits/nextcloudpi-arm64:${version?}
          docker manifest push ownyourbits/nextcloudpi:${version?}

      - name: Create manifest and push as latest to docker hub
        run: |
          docker manifest create ownyourbits/nextcloudpi:latest \
          ownyourbits/nextcloudpi-armhf:latest \
          ownyourbits/nextcloudpi-x86:latest \
          ownyourbits/nextcloudpi-arm64:latest
          docker manifest push ownyourbits/nextcloudpi:latest

  github-release:
    needs:
      - build-and-test-lxd
      - build-sd-images
      - test-curl-installer
    runs-on: ubuntu-latest
    env:
      UID: "${{ github.run_id }}-rpi"
      VERSION: "${{ inputs.git_ref || github.head_ref || github.ref_name }}"
    defaults:
      run:
        shell: bash
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: "${{ inputs.git_ref || github.head_ref || github.ref_name }}"
      - name: download images from artifact store
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Prepare Release
        id: prepare-release
        run: |
          mkdir -p release
          cd release
          checksums=()
          assets=()
          echo "Checksums:"
          for asset in ../artifacts/*/*{.tar.gz,.img};
          do
            mv "$asset" ./
            if [[ "$asset" =~ .*.img$ ]]
            then
              zip "$( basename "$asset" .img ).zip" "$asset"
              asset_name="$( basename "$asset" .img ).zip"
            else
              asset_name="$(basename "$asset")"
            fi
            checksum="$(md5sum "$asset_name")"
            echo "  $checksum"
            checksums+=("$checksum")
            assets+=(-a "$asset_name")
          done

          echo "::set-output name=assets::$(printf " %q" "${assets[@]}")"
          echo "::set-output name=checksums::$(printf " %q" "${checksums[@]}")"
      - name: Publish
        if: ${{ github.event_name == 'push' && github.ref_type == 'tag' && github.ref_protected }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: ./release
        run: |
          subject="$(git tag -n10 --format="%(contents:subject)" "${{ env.VERSION }}")"
          body="$(git tag -n10 --format="%(contents:body)" "${{ env.VERSION }}")"
          separator="

          ---
          
          "
          
          checksums_str=""
          for checksum in checksums
          do
            checksums_str="$checksums_str
          ```
          $checksum
          ```"
          done

          hub release create ${{ steps.prepare-release.outputs.assets }} -F - "${{ env.VERSION }}" <<EOF
          ${subject:-No message found}

          ${body:+${body}${separator}}[Docker images](https://hub.docker.com/r/ownyourbits/nextcloudpi)

          [Changelog](https://github.com/nextcloud/nextcloudpi/blob/${{ env.VERSION }}/changelog.md)

          **Checksums:**
          ${checksums_str}
          EOF
